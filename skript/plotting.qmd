# Grafikerstellung
Mit der Methode `pd.plot()` können Series und DataFrame grafisch dargestellt werden. Dazu greift Pandas auf matplotlib zurück. Die Syntax von Pandas ist einfacher, dafür bietet das Modul weniger Möglichkeiten als matplotlib. Jedoch können Befehle aus Pandas und aus matplotlib zur Grafikerstellung kombiniert werden. Eine ausführliche Einführung in die Grafikerstellung mit erhalten Sie im Baustein **Querverweis auf m-plotting**.

```{python}
#| echo: false
# recreate DataFrame from previous chapter
import numpy as np
import pandas as pd

# DataFrame erzeugen
temperaturen_2021 = pd.Series([2, 4, 7, 12, 19, 23, 25, 23, 18, 15, 9, 5])
temperaturen_2022 = pd.Series([3, 6, 9, 13, 18, 21, 24, 23, 19, 14, 8, 4])
temperaturen_2023 = pd.Series([-3, -1, 4, 9, 15, 20, 20, 19, 16, 15, 7, 6])
temperaturen_2024 = pd.Series([-1, 2, 5, 8, 17, 24, 25, 20, 17, 14, 9, 2])

temperaturen = pd.concat([temperaturen_2021, temperaturen_2022, temperaturen_2023, temperaturen_2024], axis = 1)
temperaturen.columns = [2021, 2022, 2023, 2024]
temperaturen.index = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez']

# meerschweinchen einlesen
dateipfad = "01-daten/ToothGrowth.csv"
meerschweinchen = pd.read_csv(filepath_or_buffer = dateipfad, sep = ',', header = 0, \
  names = ['ID', 'len', 'supp', 'dose'], dtype = {'ID': 'int', 'len': 'float', 'dose': 'float', 'supp': 'category'})
```

## Series
Eine Series wird gegen den Index geplottet. Standardmäßig wird ein Liniendiagramm gezeichnet. Mit den Parametern `xlabel` und `ylabel` können Achsenbeschriftungen eingetragen werden.

```{python}
#| fig-alt: "Liniendiagramm des Indexes (0 bis 59) gegen die Länge zahnbildender Zellen von Meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen['len'].plot(xlabel = 'Index', ylabel = 'len')
```

Mit dem Parameter `kind` kann der Grafiktyp geändert werden. Einige Möglichkeiten sind:

  - `'line'`: Standardwert Liniendiagramm
  - `'bar'`: vertikales Balkendiagramm
  - `'hbar'`: horizontales Balkendiagramm
  - `'hist'`: Histogramm
  - `'box'`: Boxplot
  - `'pie'`: Tortendiagramm

Einige sinnvolle Parameter sind:

  - `colormap = palette` ändert die Farbpalette. Eine Liste der in matplotlib verfügbaren Paletten finden Sie in der [Dokumentation](https://matplotlib.org/stable/users/explain/colors/colormaps.html).
  - `figsize = (Breite, Höhe)` Tupel der Bildgröße in Zoll
  - `legend = True` zeichnet eine Legende ein..
  - `title = 'Titel'` trägt einen Titel ein.
  - `grid = True` fügt Gitternetzlinien ein.
  - `xlim = (min, max)` / `ylim = (min, max)` setzt den Wertebereich der x- bzw. y-Achse.

```{python}
#| fig-alt: "Tortendiagramm der Vitamin C Dosis im Datensatz meerschweinchen mit drei gleich großen Segmenten für die Dosen 0.5, 1.0 und 2.0. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen['dose'].value_counts().plot(kind = 'pie', ylabel = 'Dosis', colormap = 'Blues', figsize = (6, 6), legend = True, title = 'Tortendiagramm der Dosis Vitamin C')
```

## DataFrame
Für DataFrames sind weitere Optionen verfügbar. Mittels der Parameter `x` und `y` können Spalten oder Zeilen ausgewählt werden, die auf den jeweiligen Achsen aufgetragen werden sollen. `y` kann dabei auch eine Liste mit mehreren Einträgen enthalten.

```{python}
#| fig-alt: "Liniendiagramm der Vitamin C Dosis und der Länge der zahnbildenden Zellen gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen.plot(x = 'ID', y = ['dose', 'len'])
```

&nbsp;

Für DataFrames ist das Streudiagramm als Diagrammtyp verfügbar.

```{python}
#| fig-alt: "Streudiagramm der Länge zahnbildender Zellen gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen.plot(x = 'ID', y = 'len', kind = 'scatter')
```

## subplots
Mit dem Argument `subplots = True` werden Teilgrafiken erstellt. Dabei wird automatisch das Argument `sharex = True` gesetzt, sodass beide Teilgrafiken eine gemeinsame x-Achse nutzen teilen. Dem Parameter `title` können Überschriften für jede Teilgrafik als Liste übergeben werden.
```{python}
#| fig-alt: "Liniendiagramm der Vitamin C Dosis und der Länge der zahnbildenden Zellen in zwei Teilgrafiken gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen.plot(x = 'ID', y = ['dose', 'len'], subplots = True, title = ['Vitamin C Dosis', 'Länge zahnbildender Zellen']);
```

&nbsp;

Ebenso ist das Argument `sharey = True` verfügbar. Das Argument `sharex` wird auf False gesetzt.
```{python}
#| fig-alt: "Liniendiagramm der Vitamin C Dosis und der Länge der zahnbildenden Zellen in zwei Teilgrafiken mit gleich skalierter y-Achse gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

meerschweinchen.plot(x = 'ID', y = ['dose', 'len'], subplots = True, sharex = False, sharey = True, title = ['Vitamin C Dosis', 'Länge zahnbildender Zellen']);
```

&nbsp;

Um die überdeckte Beschriftung der x-Achse zu beheben, muss auf einen Befehl aus dem Modul matplotlib.pyplot zurückgegriffen werden.
```{python}
#| fig-alt: "Liniendiagramm der Vitamin C Dosis und der Länge der zahnbildenden Zellen in zwei Teilgrafiken gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

import matplotlib.pyplot as plt

meerschweinchen.plot(x = 'ID', y = ['dose', 'len'], subplots = True, sharex = False, sharey = True, title = ['Vitamin C Dosis', 'Länge zahnbildender Zellen']);
plt.tight_layout()
```

&nbsp;

Auch um für jede Teilgrafik eine y-Achsenbeschriftung zu setzen, muss auf matplotlib zurückgegriffen werden.

```{python}
#| fig-alt: "Liniendiagramm der Vitamin C Dosis und der Länge der zahnbildenden Zellen in zwei Teilgrafiken gegen die auf der x-Achse aufgetragene ID im Datensatz meerschweinchen. Die Grafik zeigt die Code-Ausführung und hat keine inhaltliche Bedeutung."

mein_plot = meerschweinchen.plot(x = 'ID', y = ['dose', 'len'], subplots = True, sharex = False, sharey = True, title = ['Vitamin C Dosis', 'Länge zahnbildender Zellen']);

mein_plot[0].set_ylabel('Milligramm pro Tag')
mein_plot[1].set_ylabel('Micron')
plt.tight_layout()
plt.show()
```