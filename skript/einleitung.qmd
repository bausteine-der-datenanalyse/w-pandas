# Einleitung

<div style="position: relative; width: 100%; aspect-ratio: 16 / 9;">
  <iframe src="https://av.tib.eu/player/71640" allowfullscreen style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"></iframe>
</div>

&nbsp; 

Das Modul Pandas wurde für die Arbeit mit strukturierten Daten konzipiert. Pandas erleichtert die Analyse insbesondere von in Tabellenform vorliegenden Daten, da es mit dem DataFrame eine leicht zu benutzende Struktur für die Verarbeitung unterschiedlicher Datentypen und fehlenden Werten bietet. Wie NumPy erlaubt Pandas vektorisierte Operationen, ohne mit Hilfe einer Schleife jedes Element eines Sammeltyps durchlaufen zu müssen. Pandas integriert darüber hinaus Funktionalitäten anderer Module und bietet unter anderem einen einheitlichen Zugang zu:

  - Datumsinformationen und Zeitreihen
  - Grafikerstellung
  - Einlesen von Dateien

Das Modul Pandas wird mit dem Befehl `import pandas` geladen. Als Kürzel hat sich pd etabliert. Da Pandas auf dem Modul NumPy aufbaut, werden häufig beide Module geladen. Viele Funktionen und Methoden von NumPy und Pandas sind miteinander kompatibel.

```{python}
import numpy as np
import pandas as pd
```

## Die Datenstrukturen Series und DataFrame
Pandas führt die zwei Klassen `Series` und `DataFrame` ein.

  - `Series` sind eindimensionale Arrays, die genau einen Datentyp haben.

  - `DataFrame` sind zweidimensionale Arrays, die spaltenweise aus `Series` bestehen und so verschiedene Datentypen enthalten können. (Durch hierarchische Indexierung sind mehrdimensionale Datenstrukturen möglich, siehe [MultiIndex](https://pandas.pydata.org/docs/user_guide/advanced.html).)

Beide Datenstrukturen verfügen über einen Index, der in der Ausgabe angezeigt wird. 
```{python}
#| echo: false

print(f"Der Index beginnt wie in der Pythonbasis bei 0.\n{pd.Series(['Frühschicht', 'Frühschicht', 'Spätschicht'], dtype = 'string')}")
```

Der Index ist standardmäßig numerisch, kann aber mit beliebigen Werten versehen werden.

```{python}
#| echo: false

print(f"Der Index kann angepasst werden.\n{pd.Series(['Frühschicht', 'Frühschicht', 'Spätschicht'], dtype = 'string', index = ["Montag", "Dienstag", "Mittwoch"])}")
```

### Series
`Series` werden mit der Funktion `pd.Series(data)` erstellt. data kann ein Einzelwert, ein Sammeltyp oder ein NumPy-Array sein.

```{python}
einzelwert_series = pd.Series('Hallo Welt!')
print(f"Series aus Einzelwert:\n{einzelwert_series}")

numerische_series = pd.Series([1, 2, 3])
print(f"\nSeries aus Liste:\n{numerische_series}")

alphanumerische_series = pd.Series(('a', '5', 'g'))
print(f"\nSeries aus Tupel:\n{alphanumerische_series}")

boolean_series = pd.Series(np.array([True, False, True])) # NumPy-Array
print(f"\nSeries aus NumPy-Array:\n{boolean_series}")
```

Beim Anlegen einer `pd.Series` können verschiedene Parameter übergeben werden:

  - `pd.Series(data, dtype = 'float')` legt den Datentyp der Series fest.

  - `pd.Series(data, index = ['A1', 'B2', 'C3'])` übergibt Werte für den Index.

  - `pd.Series(data, name = 'der Name')` legt einen Namen für die Series fest.

```{python}
numerische_series = pd.Series([1, 2, 3], dtype = 'float', index = ['A1', 'B2', 'C3'],name = 'Gleitkommazahlen')
print(numerische_series)
```

Für eine bestehende Series können Name und Index über entsprechende Attribute aufgerufen und geändert werden. Um den Datentyp zu ändern, wird die Methode `pd.Series.astype()` verwendet. Eine Übersicht der in Pandas verfügbaren Datentypen finden Sie in der [Pandas-Dokumentation](https://pandas.pydata.org/docs/user_guide/basics.html#dtypes).

```{python}
print(f"Name der Series: {numerische_series.name}")
numerische_series.name = 'Fließkommazahlen'

print(f"Index der Series: {numerische_series.index}")
numerische_series.index =  ['eins', 'zwei', 'drei']

numerische_series = numerische_series.astype('string')
print(f"\nDie geänderte Series:\n{numerische_series}")
```

### Aufgabe Series
Ändern Sie den Datentyp des Objekts 'numerische_series' in Ganzzahl und wählen Sie einen neuen Namen für die Series aus.

::: {#tip-dtype .callout-tip collapse="true"}
## Musterlösung dtype
```{python}
numerische_series.name = 'Ganzzahlen'
numerische_series = numerische_series.astype('float')
numerische_series = numerische_series.astype('int')

print(numerische_series)
```

:::

### DataFrame
Ein `DataFrame` wird mit der Funktion `pd.DataFrame([data])` angelegt. data ist listenartig, kann aber aus einem Einzelwert, einer Series, einem Numpy-Array oder aus mehreren Series und Sammeltypen bestehen.

```{python}
einzelwert_df = pd.DataFrame(['Hallo Welt!'])
print(einzelwert_df, "\n")

df_aus_listen = pd.DataFrame([[1, 2, 3], [4, 5, 6]])
print(df_aus_listen, "\n")

df_aus_series = pd.DataFrame([alphanumerische_series, boolean_series])
print(df_aus_series, "\n")

df_aus_verschieden = pd.DataFrame([np.array([True, False, True]), alphanumerische_series, [1, 2, 3]]) # NumPy-Array
print(df_aus_verschieden)

```

Beim Anlegen eines DataFrames können ebenfalls verschiedene Parameter übergeben werden:

  - `pd.DataFrame(data, dtype = 'float')` legt den Datentyp des DataFrames für alle Werte fest. Wird der Parameter nicht übergeben, wählt Pandas einen passenden Datentyp für jede Spalte aus.

  - `pd.DataFrame(data, index = ['A1', 'B2', 'C3'])` übergibt Werte für den Index.

  - `pd.DataFrame(data, columns = ['Spalte1', 'Spalte2'])` übergibt Werte für die Spaltenbeschriftung.

Um Daten spaltenweise einzutragen, kann der DataFrame zum einen mit dem Attribut `DataFrame.T` transponiert werden. Dabei müssen die Spaltenbeschriftungen als Argument `index` und die Indexbeschriftung als Argument `columns` übergeben werden.

```{python}
df_transponiert = pd.DataFrame([[1, 2, 3], [True, False, True]], index = ['Spalte 1', 'Spalte 2'], columns = ['Zeile 1', 'Zeile 2', 'Zeile 3']).T
print(df_transponiert)
```

Eine direkte Zuordnung der Beschriftungen ist möglich, indem zuerst der transponierte DataFrame angelegt und anschließend über die Attribute `.index` und `.columns` die Beschriftungen eingetragen werden.

```{python}
df_transponiert = pd.DataFrame([[1, 2, 3], [True, False, True]]).T
df_transponiert.columns = ['Spalte 1', 'Spalte 2']
df_transponiert.index = ['Zeile 1', 'Zeile 2', 'Zeile 3']
print(df_transponiert)
```

Das Anlegen von transponierten DataFrames hat den Nachteil, dass Pandas die Datentypen der eingegebenen Daten spaltenweise verwaltet. Bei der zeilenweise erfolgenden Eingabe von Daten unterschiedlichen Datentyps wird ein für alle Spalten passender Datentyp gewählt. Im folgenden Beispiel wird deshalb von Pandas der Datentyp `object` für gemischte Datentypen gewählt.

```{python}
df_transponiert = pd.DataFrame([[1, 2, 3], ['a', 'b', 'c']], index = ['Zahlen', 'Buchstaben']).T
print(df_transponiert)
print(f"\n{df_transponiert.dtypes}")
```

Zum anderen kann ein DataFrame direkt aus einem Dictionary erzeugt werden. Dabei werden die Schlüssel als Spaltenbeschriftung verwendet.

```{python}
df = pd.DataFrame({'Spalte 1': [1, 2, 3], 'Spalte 2': [4.1, 5.6, 6.0]}, index = ['oben', 'mitte', 'unten'])
print(df)
```

Außerdem kann ein DataFrame durch Zuweisung von Daten erweitert werden.

```{python}
# einen leeren DataFrame erzeugen
df = pd.DataFrame()

# Zuweisung von Daten
df['Spaltenbeschriftung'] = [1, 2, 3]
df['zweite Spalte'] = alphanumerische_series

print(df)
```

::: {#tip-index .callout-tip collapse="false"}
## Der Index

In den meisten Fällen ist der von 0 bis n-1 reichende Index am praktischsten. Der numerische Index hilft bei der Auswahl von Indexbereichen (Slicing) und der Arbeit mit mehreren Datenstrukturen. Probieren Sie einmal aus, was passiert, wenn Sie einen DataFrame aus zwei Series mit unterschiedlichen Indizes erstellen.

Auch widerspricht das Auslagern beschreibender oder gemessener Variablen in den Index dem Konzept tidy data, einem System zum Strukturieren von Datensätzen, das Sie im [Methodenbaustein Einlesen strukturierter Datensätze](https://bausteine-der-datenanalyse.github.io/m-einlesen-strukturierter-datens-tze/einlesen-strukturierter-datens%C3%A4tze.html) kennenlernen. 

:::

Bestehende DataFrames können ähnlich wie Series modifiziert werden. Um den Datentyp einer oder mehrerer Spalten zu ändern, wird die Methode `pd.DataFrame.astype()` verwendet.

``` {python}
df = pd.DataFrame({'Spalte 1': ['1', '2', '3'], 'Spalte 2': [True, False, True]})
print(f"Die Datentypen von df:\n{df.dtypes}")

# Datentyp von Spalte 1 ändern
df['Spalte 1'] = df['Spalte 1'].astype('string')
print(f"\nDie Datentypen von df:\n{df.dtypes}")
```

Ebenso kann allen Spalten eines DataFrames ein Datentyp zugewiesen werden.

```{python}
df = df.astype('string')
print(f"\nDie Datentypen von df:\n{df.dtypes}")
```

Um unterschiedliche Datentypen zuzweisen, wird ein Dictionary verwendet.

```{python}
df = df.astype({'Spalte 1': 'int', 'Spalte 2': 'bool'})
print(f"\nDie Datentypen von df:\n{df.dtypes}")
```

Spaltennamen und Index eines bestehenden `DataFrame` können über entsprechende Attribute oder Methoden verändert werden. Die Spaltennamen können über das Attribut `pd.DataFrame.columns` geändert werden. Dabei wird eine Liste übergeben, deren Länge der Spaltenanzahl entsprechen muss. Der Index kann über das Attribut `pd.DataFrame.index` geändert werden, indem eine Liste zugewiesen wird. Dabei muss die Länge der Liste der Anzahl Zeilen entsprechen. 

```{python}
# ändern der Spaltennamen über das Attribut .columns
df.columns = ['Spalte1', 'Spalte2']
df.index = [1, 2, 3]
print(df)
```

Mit der Methode `pd.DataFrame.rename(columns = {"alt1": "neu1", "alt2": "neu2"}, index = {"alt1": "neu1", "alt2": "neu2"}, inplace = True)` können Spalten- und Zeilenbeschriftungen in Form eines Dictionarys übergeben werden. Auf diese Weise können alle oder ausgewählte Beschriftungen geändert werden. Durch das Argument `inplace = True` erfolgt die Zuweisung direkt ohne Neuzuweisung des Objekts.

```{python}
df.rename(columns = {'Spalte1': 'Spalte_1', 'Spalte2': 'Spalte_2'}, index = {1: 'A1', 2: 'B2', 3: 'C3'}, inplace = True)
print(df)
```

Mit der Methode `pd.DataFrame.reset_index(inplace = True, drop = True)` wird der Index auf die Standardwerte zurückgesetzt. Wird der Parameter `drop = False` gesetzt, wird der alte Index als Spalte an Indexposition 0 in den DataFrame eingefügt.

```{python}
df.reset_index(inplace = True, drop = True)
print(df)
```

### Aufgabe DataFrame
Erstellen Sie einen DataFrame.
  
  - Die erste Spalte soll die Zahlen von 1 bis 12 enthalten und mit 'Nummer' beschriftet werden. Die zweite Spalte soll die Monatsnamen des Jahres enthalten und mit 'Monat' beschriftet werden.
  - Fügen Sie nachträglich die Series 'ferien' als dritte Spalte mit der Spaltenbeschriftung 'Ferien' ein.  
  `ferien = [False, False, False, True, False, True, True, True, False, True, False, True]`

::: {#tip-musterloesungdataframe .callout-tip collapse="true"}
## Musterlösung

```{python}

ferien = [False, False, False, True, False, True, True, True, False, True, False, True]

df = pd.DataFrame({
  'Nummer': list(range(1,13)),
  'Monat': ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
})

df['Ferien'] = ferien

print(df)
```

:::

## Deskriptive Datenanalyse mit Pandas
Pandas bietet einige praktische Funktionen, um den Aufbau eines Datensatzes und die enthaltenen Daten zu beschreiben. Als Beispieldatensatz dienen Daten zur Länge zahnbildender Zellen bei Meerschweinchen, die Vitamin C direkt (VC) oder in Form von Orangensaft (OJ) in unterschiedlichen Dosen erhielten.

:::: {.border}

::::: {#lst-readfile}
```{python}


dateipfad = "01-daten/ToothGrowth.csv"
meerschweinchen = pd.read_csv(filepath_or_buffer = dateipfad, sep = ',', header = 0, \
  names = ['ID', 'len', 'supp', 'dose'], dtype = {'ID': 'int', 'len': 'float', 'dose': 'float', 'supp': 'category'})
```

:::::

Crampton, E. W. 1947. „THE GROWTH OF THE ODONTOBLASTS OF THE INCISOR TOOTH AS A CRITERION OF THE VITAMIN C INTAKE OF THE GUINEA PIG“. The Journal of Nutrition 33 (5): 491–504. <https://doi.org/10.1093/jn/33.5.491> 

Der Datensatz kann in R mit dem Befehl "ToothGrowth" aufgerufen werden.
::::

&nbsp;

Ein Aussschnitt des Datensatzes:
```{python}
#| echo: false

meerschweinchen.iloc[meerschweinchen.index % 10 == 0, : ]
```

&nbsp;

Die Methode `pd.DataFrame.info()` erzeugt eine Beschreibung des Datensatzes. 
``` {python}
meerschweinchen.info()
```

Die Dimensionen einer Series oder eines DataFrame können mit dem Attribut `shape` abgerufen werden. Der DataFrame hat 60 Zeilen und 4 Spalten.

```{python}
print(meerschweinchen.shape)
```

Die Methode `pd.DataFrame.describe()` erzeugt eine beschreibende Statistik für einen DataFrame. Standardmäßig werden alle numerischen Spalten berücksichtigt. Mit dem Parameter `include` können die zu berücksichtigenden Spalten vorgegeben werden. `include = all` berücksichtigt alle Spalten, was nicht unbedingt sinnvoll ist, da auf diese Weise auch die Spalte mit den ID-Nummern der Meerschweinchen ausgewertet wird.

``` {python}
print(meerschweinchen.describe(include = 'all'))
```

Mit dem Parameter `include` kann eine Liste zu berücksichtigender Datentypen übergeben werden. Der Parameter `exclude` schließt auf die gleiche Weise Datentypen von der Ausgabe aus.

``` {python}
print(meerschweinchen.describe(include = ['float']))
```

``` {python}
print(meerschweinchen.describe(include = ['category']))
```

Die Methode `pd.DataFrame.count()` zählt alle nicht fehlenden Werte in jeder Spalte oder  mit `pd.DataFrame.count(axis = 'columns')` in jeder Zeile.
``` {python}
meerschweinchen.count(axis = 'rows') # der Standardwert von axis ist 'rows'
```

Die Methode `pd.Series.value_counts()` zählt die Anzahl der Merkmalsausprägungen in einer Series. Die Methode kann auch auf einen DataFrame angewendet werden, dann wird die Häufigkeit jeder einzigartigen Zeile gezählt (was hier nicht sinnvoll ist).
```{python}
meerschweinchen['dose'].value_counts()
```

Die Methode `pd.unique()` listet alle einzigartigen Werte einer Series auf.
``` {python}
meerschweinchen['dose'].unique()
```

## Slicing
::: {.border}
![zweidimensionaler Datensatz](00-bilder/zweidimensionaler-datensatz-slicing-mf-mp.png){width="45%" fig-alt="Dargestellt ist ein zweidimensionaler Block, der einen zweidimensionalen Datensatz repräsentiert. Pfeile repräsentieren die zwei Achsen. Die nullte Achse entspricht der Länge (von oben nach unten) und die erste Achse der Breite des Datensatzes."}

slicing von Marc Fehr ist lizensiert unter [CC-BY-4.0](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen#CC-BY-4.0-1-ov-file) und abrufbar auf [GitHub](https://github.com/bausteine-der-datenanalyse/w-python-numpy-grundlagen). Die Grafik wurde auf den gezeigten Teil beschnitten und die obenstehende Beschriftung entfernt. 2024
:::

&nbsp;

Pandas bringt eigene Werkzeuge für die Auswahl von Indexbereichen mit. Der Slice Operator aus der Pythonbasis wird deshalb nur kurz vorgestellt.

### Slice Operator
Mit dem Slice Operator können wie bei einer Liste Indexbereiche aus einer Series ausgewählt werden.

```{python}
zehn_zahlen = pd.Series(range(0, 10))
print(zehn_zahlen[3:6])
```

Mit dem Slice Operator werden die Zeilen eines DataFrames ausgewählt.

```{python}
print(meerschweinchen[7:12])
```

Durch Angabe eines Spaltennamens wird die entsprechende Spalte ausgewählt, die als Series zurückgegeben wird. Durch das Anfügen eines zweiten Slice Operators ist es möglich, wie bei einem eindimensionalen Datensatz die Werte in einem bestimmten Indexbereich abzurufen. Dies wird verkettete Indexierung genannt.

```{python}
print(meerschweinchen['dose'][10:15], "\n")
print(type(meerschweinchen['dose'][10:15]))
```

::: {#wrn-chainedassignment .callout-warning appearance="simple"}
## Verkettete Indexierung

Die verkettete Indexierung erzeugt in Pandas abhängig vom Kontext eine Kopie des Objekts oder greift auf den Speicherbereich des Objekts zu. Mit Pandas 3.0 wird die verkettete Indexierung nicht mehr unterstützt, das Anlegen einer Kopie wird zum Standard werden. Weitere Informationen erhalten Sie im zitierten Link.

:::: {.border layout="[5, 90, 5]"}

&nbsp;

"Whether a copy or a reference is returned for a setting operation, may depend on the context. This is sometimes called `chained assignment` and should be avoided. See [Returning a View versus Copy](https://pandas.pydata.org/docs/user_guide/indexing.html#indexing-view-versus-copy)."

&nbsp;

::::

([Pandas Dokumentation](https://pandas.pydata.org/docs/user_guide/indexing.html))
:::

### Slicing mit Pandas-Methoden
Für das Slicing von Series und DataFrames werden in Pandas die Methoden `.iloc[]` und `.loc[]` verwendet.

  - `.loc[]` arbeitet mit Index- oder Spaltenbeschriftungen, akzeptiert aber auch ein boolsches Array. 

  - `.iloc[]` arbeitet mit Ganzzahlen, akzeptiert aber auch ein boolsches Array.

Für das Slicing von Series wird eine Bereichsangabe übergeben, bspw. `pd.Series.iloc[5:8]`. Für das Slicing von DataFrames werden zwei durch ein Komma getrennte Bereichsangaben übergeben, wobei an erster Stelle die Zeilen und an zweiter Stelle die Spalten ausgewählt werden, bspw. `pd.DataFrame.iloc[5, 2:4]`. Um alle Zeilen oder Spalten auszuwählen kann der Doppelpunkt verwendet werden, etwa `pd.DataFrame.iloc[5, :]`.

#### Beschriftungsbasiertes Slicing mit .loc[]

Für eine Series interpretiert `.loc` übergebene Zeichen als Indexbeschriftung. Buchstaben und andere Zeichen werden wie strings in Anführungszeichen übergeben, bspw. `.loc['e']`, Zahlen ohne Anführungszeichen. Neben Einzelwerten (`'a'` oder `0`) können Listen oder Arrays (`['a', 'b', 'c']` oder `[1, 2, 3]`) und Slices übergeben werden (`'a':'c'` oder `0:2`). Das Slicing mit einem Einzelwert führt zur Rückgabe eines Einzelwerts (sog. Skalar).

::: {#wrn-inklusiveslicing .callout-warning appearance="simple"}
## inklusives Slicing

Anders als die Pythonbasis und das Slicing mit `.iloc[]` zählt Pandas beim beschriftungsbasiertem Slicing inklusiv, gibt also die letzte ausgewählte Position mit aus.
:::

```{python}
# Nummern
zehn_zahlen = pd.Series(range(0, 10))
print("Rückgabe eines Einzelwerts:", zehn_zahlen.loc[5]) # Einzelwert
print(zehn_zahlen.loc[[2, 4, 7]]) # Liste
print(zehn_zahlen.loc[5:7], "\n") # Slice

# Buchstaben und andere Zeichen
sechs_zahlen = pd.Series(list(range(0, 6)), index = ['a', 'b', 'c', 'd', 'e', 'f'])
print("Rückgabe eines Einzelwerts:", sechs_zahlen.loc['c']) # Einzelwert
print(sechs_zahlen.loc[['c', 'f', 'a']]) # Liste
print(sechs_zahlen.loc['c':'e']) # Slice
```

Die Interpretation als Beschriftung bedeutet, dass bei einem nicht numerischen Index, 
übergebene Zahlen nicht gefunden werden.

```{python}
try:
  print(sechs_zahlen.loc[2:4])
except Exception as error:
  print(error)
```

Für DataFrames funktioniert das Slicing genauso.

```{python}
print(meerschweinchen.loc[18:22, ['len', 'dose']])
```

### Indexbasiertes Slicing mit .iloc[]
Die Methode `.iloc[]` ermöglicht die Auswahl von Ausschnitten basierend auf Indexpositionen. Die Methode akzeptiert die gleichen Eingaben wie die Methode `.loc[]`.

::: {#wrn-exklusiveslicing .callout-warning appearance="simple"}
## exklusives Slicing

Beim Slicing mit der Methode `.iloc[]` zählt Pandas wie die Pythonbasis exklusiv.
:::

Das Slicing mit Einzelwerten führt zur Ausgabe eines Einzelwertes. Die Methode akzeptiert ebenfalls eine Liste oder ein Slice.

```{python}
print("Rückgabe eines Einzelwerts:", meerschweinchen.iloc[27, 2]) # Einzelwerte
print(meerschweinchen.iloc[[27, 29, 52], 2:4]) # Liste und Slice
```

#### Die Methoden .head() und .tail()
Vereinfachte Varianten des indexbasierten Slicings sind die Methoden `.head(n=5)` und `.tail(n=5)`, mit denen die ersten bzw. letzten n Zeilen eines DataFrame oder einer Series ausgegeben werden  können. Über den optionalen Paramenter `n` kann die Anzahl der angezeigten Zeilen gesteuert werden. Die Methoden eignen sich gut, um sich einen ersten Eindruck von einem Datensatz zu verschaffen.

```{python}
print(meerschweinchen.head(3), "\n")
print(meerschweinchen.tail(3))
```

Ebenso können Series damit betrachtet werden.

```{python}
print(meerschweinchen['len'].tail(3))
```

## Aufgaben Slicing
1. Gegeben ist eine Pandas Series 'temperaturen_2021' mit den durchschnittlichen Monatstemperaturen. Wählen Sie die Temperaturen für die Frühlingsmonate (März bis Mai) aus.

```{python}
temperaturen_2021 = pd.Series([2, 4, 7, 12, 19, 23, 25, 23, 18, 15, 9, 5],
                         index = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 
                         'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'])
```

2. Wählen Sie die Temperaturen für die letzten drei Monate des Jahres einmal mit Hilfe des Slicing Operators und einmal mit Hilfe der Pandas-Methoden aus.

3. Wählen Sie mit der Methode `.loc[]` die Spalten 'dose' und 'len' des DataFrame meerschweinchen aus und geben Sie die ersten 4 und die letzten 3 Zeilen aus. (Code zum Einlesen der Datei siehe @lst-readfile)  

4. Die Methoden `.loc[]` und `.iloc[]` akzeptieren auch ein boolsches Array als Eingabe. Geben Sie aus der Spalte 'dose' des DataFrame meerschweinchen alle Zeilen mit dem Wert 2.0 aus.

::: {#tip-dose .callout-tip collapse="true"}
## Musterlösung Slicing

Aufgabe 1
```{python}
print(temperaturen_2021.loc[['Mär', 'Apr', 'Mai']])
```

Aufgabe 2
```{python}
print(temperaturen_2021[len(temperaturen_2021)-3:], "\n")
print(temperaturen_2021.iloc[len(temperaturen_2021)-3:])
```

Aufgabe 3

```{python}
print(meerschweinchen.loc[ :, ['dose', 'len']].head(n = 4), "\n")
print(meerschweinchen.loc[ :, ['dose', 'len']].tail(n = 3))
```

Aufgabe 4
```{python}
# Slice aus Series
# print(meerschweinchen['dose'].loc[meerschweinchen['dose'] == 2.0])

# Slice aus DataFrame
print(meerschweinchen.loc[meerschweinchen['dose'] == 2.0, ['dose']])

```

:::

## Datenstrukturen verbinden
DataFrames sind flexible Datenspeicher. Mit der Funktion `pd.concat()` können Series und DataFrames zusammengeführt werden.

 - Mit dem Argument `pd.concat(ignore_index = True)` wird ein neuer Index generiert.
 - Mit dem Argument `pd.concat(axis = 1)` werden die übergebenen objekte spaltenweise zusammengeführt.

```{python}
series_1 = pd.Series([1, 2])
series_2 = pd.Series([4, 5])
print(pd.concat([series_1, series_2]), "\n")
print(pd.concat([series_1, series_2], ignore_index = True), "\n")
print(pd.concat([series_1, series_2], ignore_index = True, axis = 1))
```

Gleichermaßen können DataFrames verbunden werden.

```{python}
temperaturen_2022 = pd.Series([3, 6, 9, 13, 18, 21, 24, 23, 19, 14, 8, 4],
                         index = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 
                         'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'])

temperaturen_2023 = pd.Series([-3, -1, 4, 9, 15, 20, 20, 19, 16, 15, 7, 6],
                         index = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 
                         'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'])

temperaturen_2024 = pd.Series([-1, 2, 5, 8, 17, 24, 25, 20, 17, 14, 9, 2],
                         index = ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 
                         'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'])

# Series zu DataFrame verbinden
df1 = pd.concat([temperaturen_2021, temperaturen_2022], axis = 1)
df2 = pd.concat([temperaturen_2023, temperaturen_2024], axis = 1)

# DataFrames verbinden
temperaturen = pd.concat([df1, df2], axis = 1)
temperaturen.columns = [2021, 2022, 2023, 2024]
print(temperaturen)
```

## Einfügen und löschen in Datenstrukturen
Der Operator `del` aus der Pythonbasis löscht Spalten aus einem DataFrame `del DataFrame['Spaltenname']`. Pandas bringt aber auch eigene Methoden mit, um Einträge zeilen- / oder spaltenweise zu ergänzen und zu löschen.

  - `pd.DataFrame.drop(labels = None, axis = 0, index = None, columns = None, inplace = False)` entfernt Zeilen oder Spalten nach den mit dem Parameter `labels` als Einzelwert (`'Spalte 1'`) oder als Liste (`['Spalte 1', 'Spalte 2']`) übergebenen Beschriftungen. Der Parameter `axis` steuert, ob Zeilen oder Spalten (`axis = 1`) entfernt werden sollen. Die Parameter `index` und `columns` sind  alternative Möglichkeiten, Index- oder Spaltenbeschriftungen direkt zu übergeben und ersetzen die Parameter `labels` und `axis`.

  - `pd.DataFrame.insert(loc, column, value)` fügt eine Spalte an Position `loc` mit dem Spaltennamen `column` und dem Inhalt `value` ein. Falls `value` eine Series mit abweichendem Index ist, kann über das Attribut `value = Series.values` auf die enthaltenen Werte der Series zugegriffen und diese in den bestehenden Index einfgefügt werden (andernfalls gleicht Pandas die Indizes der Series und des DataFrames ab und fügt nur die Werte übereinstimmender Indizes ein).

  - Werte können zeilenweise mit der Methode `pd.DataFrame.loc[index] = value` eingefügt werden. Falls `value` eine Series ist, muss über das Attribut `value = Series.values` auf die enthaltenen Werte der Series zugegriffen werden, da Pandas andernfalls versucht, den Index der Series mit den Spaltennamen des DataFrames abzugleichen. Wird als `value` ein Einzelwert übergeben, füllt dieser die gesamte Zeile aus.

## Aufgaben verbinden und löschen
Legen Sie einen leeren DataFrame `df = pd.DataFrame()` an.

1. Fügen Sie die Spalten 'len' und 'dose' aus dem DataFrame 'meerschweinchen' ein.

2. Löschen Sie alle ungeraden Zeilennummern aus dem DataFrame df.

3. Benutzen Sie die Indexnummern des DataFrame df, um die entsprechenden Zeilen aus der Spalte 'ID' des DataFrame 'meerschweinchen' auszuwählen. Fügen Sie diese als Spalte an Indexposition 0 in den DataFrame df ein.

::: {#tip-mergeanddelete .callout-tip collapse="true"}
## Musterlösung verbinden und löschen

1. Aufgabe
```{python}
df = pd.DataFrame()

# Alternative 1
df['len'] = meerschweinchen['len']

# Alternative 2
df.insert(loc = 1, column = 'dose', value = meerschweinchen['dose'])

print(df.head(), "\n", df.shape)
```

2. Aufgabe
```{python}
df = df.drop(index = range(1, len(df), 2))

print(df.head(), "\n", df.shape)
```

3. Aufgabe
```{python}
df.insert(loc = 0, column = 'ID', value = meerschweinchen.loc[df.index, 'ID'])

print(df.head(), "\n")
print(df.tail(), "\n")
print("df.shape:", df.shape)
```

:::

## Quellen {-}
<https://pandas.pydata.org/docs/user_guide/dsintro.html>
<https://pandas.pydata.org/docs/user_guide/basics.html>